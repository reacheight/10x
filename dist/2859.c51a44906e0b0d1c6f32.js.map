{"version":3,"file":"2859.c51a44906e0b0d1c6f32.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType,\n  ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addMessages,\n  addSimilarChannels,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { onFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      onFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n\n  actions.loadFullChat({ chatId, force: true });\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    focusMessage({\n      chatId: toChannelId(chatOrChannelPostId),\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, text,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.oldTranslate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.oldTranslate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.oldTranslate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.oldTranslate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = selectChatListLoadingParameters(global, listType);\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = updateChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  global = replaceChatListLoadingParameters(\n    global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n  );\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","updateChatListIds","addUserStatuses","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","_len3","_ref10","_key3","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref12","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref13","_key6","selectChat","isChatBasicGroup","newChat","_len2","_ref9","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","closeStarsBalanceModal","otherParams","openThread","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","onFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","topic","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","phoneNumber","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","isChatChannel","isChatSuperGroup","openBoostModal","selectCurrentChat","webAppName","usernames","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","botId","_len4","_ref11","_key4","channelPostId","currentChat","isCurrentChat","startBot","param","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","selectTopics","chatlistModal","invite","peerIds","peers","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}