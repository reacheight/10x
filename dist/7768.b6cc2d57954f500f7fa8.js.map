{"version":3,"file":"7768.b6cc2d57954f500f7fa8.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/ui/workspaces.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/hooks/useStorage.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/WorkspaceManager.tsx","webpack://telegram-t/./src/components/left/main/SavedMessages.tsx","webpack://telegram-t/./src/components/left/main/CustomButtons.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/global/selectors/workspaces.ts","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMedia, isFullscreen } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    chat, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectChat(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    onFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const key = webApp && getWebAppKey(webApp);\n  const originalWebApp = key ? openedWebApps[key] : undefined;\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webApp,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...updatedWebAppKey === activeWebAppKey && {\n        activeWebApp: updatedValue,\n      },\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  const newActiveWebApp = openedWebApps[webAppKey];\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebApp: webApp },\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  if (!currentTabState.webApps.activeWebApp) return global;\n\n  return removeWebAppFromOpenList(global, currentTabState.webApps.activeWebApp, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, { ...webApp, isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = currentTabState.webApps.openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((key) => key !== removingWebAppKey);\n  }\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n\n  const isRemovedAppActive = activeWebApp && (getWebAppKey(activeWebApp) === getWebAppKey(webApp));\n\n  const openedWebAppsValues = Object.values(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebApp: openedWebAppsCount\n          ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([url, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebApp: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = currentTabState.webApps.activeWebApp;\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  newActiveWebApp.isCloseModalOpen = true;\n\n  const key = getWebAppKey(newActiveWebApp);\n\n  if (key) webAppsNotAllowedToClose[key] = newActiveWebApp;\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k in webAppsNotAllowedToClose);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList, clearOpenedWebApps, hasOpenedWebApps,\n  removeActiveWebAppFromOpenList, removeWebAppFromOpenList,\n  replaceInlineBotSettings, replaceInlineBotsIsLoading,\n  replaceIsWebAppModalOpen, replaceWebAppModalState, updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (webApp) {\n    global = getGlobal();\n    global = addWebAppToOpenList(global, webApp, true, true, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    peerId,\n    botId,\n    appName,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, webApp, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { webApp, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, webApp, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const newModalState = tabState.webApps.modalState === 'maximized' ? 'minimized' : 'maximized';\n  return replaceWebAppModalState(global, newModalState, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  const activeWebApp = tabState.webApps.activeWebApp;\n  if (!activeWebApp?.url) return undefined;\n\n  const updatedApp = {\n    ...activeWebApp,\n    slug: payload.slug,\n  };\n\n  return updateWebApp(global, updatedApp, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getPrizeStarsTransactionFromGiveaway,\n  getRequestInputInvoice,\n  getStarsTransactionFromGift,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsTransactions, closeInvoice,\n  openStarsTransactionFromReceipt,\n  openStarsTransactionModal,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice,\n  } = result;\n\n  global = getGlobal();\n\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPremiumGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { chat, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment, closeInvoice, openStarsTransactionModal, updatePayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const { users, chats, threadInfos } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApps.activeWebApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeActiveWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType, GlobalState } from '../../types';\r\n\r\nimport { addActionHandler, setGlobal } from '../..';\r\n\r\ntype UpdateWorkspaceSettingsPayload = Partial<GlobalState['workspaces']>;\r\n\r\nfunction updateWorkspaceSettings<T extends GlobalState>(\r\n  global: T, payload: UpdateWorkspaceSettingsPayload,\r\n) {\r\n  global = {\r\n    ...global,\r\n    workspaces: {\r\n      ...global.workspaces,\r\n      ...payload,\r\n    },\r\n  };\r\n  setGlobal(global);\r\n  return global;\r\n}\r\n\r\naddActionHandler('openWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: undefined });\r\n});\r\n\r\naddActionHandler('openWorkspaceEditor', (global, actions, payload?: { workspaceId: string }): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: payload?.workspaceId });\r\n});\r\n\r\naddActionHandler('closeWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: false, editingWorkspaceId: undefined });\r\n});","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'starsgift') {\n          if (!inputInvoice.userId) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen\n            && areDeepEqual(inputInvoice.userId, starsModalState.forUserId)) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'stars') {\n          if (!inputInvoice.stars) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import { useCallback, useEffect, useState } from '../lib/teact/teact';\r\n\r\nimport type { Workspace } from '../types';\r\n\r\nexport function useStorage() {\r\n  const [savedWorkspaces, setSavedWorkspaces] = useLocalStorage<Workspace[]>({\r\n    key: \"workspaces\",\r\n    initValue: [],\r\n  });\r\n  const [\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n  ] = useLocalStorage<string>({\r\n    key: \"currentWorkspaceId\",\r\n    initValue: \"0\",\r\n  });\r\n\r\n  return {\r\n    savedWorkspaces,\r\n    setSavedWorkspaces,\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n  };\r\n}\r\n\r\ntype UseLocalStorageProps<T> = {\r\n  key: string;\r\n  initValue: T;\r\n};\r\n\r\nfunction useLocalStorage<T>({ key, initValue }: UseLocalStorageProps<T>):\r\n[value: T, setValue: (val: T) => void] {\r\n  const eventName = `update_storage_${key}`;\r\n\r\n  const getStoredValue: () => (T | undefined) = useCallback(() => {\r\n    const value = localStorage.getItem(key);\r\n    if (value !== null) {\r\n      try {\r\n        return JSON.parse(value);\r\n      } catch (e) {\r\n        console.error((e as Error).message);\r\n      }\r\n    }\r\n    return undefined;\r\n  }, [key]);\r\n\r\n  const writeValue: (value: T) => void = useCallback((value) => {\r\n    const stringifiedValue = JSON.stringify(value);\r\n    if (localStorage.getItem(key) !== stringifiedValue) {\r\n      localStorage.setItem(key, stringifiedValue);\r\n      window.dispatchEvent(new Event(eventName));\r\n    }\r\n  }, [eventName, key]);\r\n\r\n  const restoreValue: () => T = useCallback(() => {\r\n    const storedValue = getStoredValue();\r\n    if (storedValue !== undefined) {\r\n      return storedValue;\r\n    } else {\r\n      writeValue(initValue);\r\n      return initValue;\r\n    }\r\n  }, [getStoredValue, writeValue, initValue]);\r\n\r\n  const [state, setState] = useState<T>(restoreValue());\r\n\r\n  useEffect(() => {\r\n    const listenStorageChange = () => {\r\n      setState(restoreValue());\r\n    };\r\n    window.addEventListener(eventName, listenStorageChange);\r\n    return () => window.removeEventListener(eventName, listenStorageChange);\r\n  }, [eventName, restoreValue]);\r\n\r\n  const setStateSafe = (value: T) => {\r\n    try {\r\n      writeValue(value);\r\n    } catch (e) {\r\n      console.error((e as Error).message);\r\n    }\r\n  };\r\n\r\n  return [state, setStateSafe];\r\n}\r\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens, Workspace } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useStorage } from '../../../hooks/useStorage';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const { currentWorkspaceId, savedWorkspaces } = useStorage();\n  const everythingWorkspace = { id: '0', name: 'Everything', foldersIds: [] } satisfies Workspace;\n  const currentWorkspace = savedWorkspaces.find((workspace) => workspace.id === currentWorkspaceId) || everythingWorkspace;\n\n  const displayedFolders = useMemo(() => {\n    if (!orderedFolderIds) return undefined;\n\n    return orderedFolderIds\n      .map((id) => {\n        if (id === ALL_FOLDER_ID && currentWorkspaceId === everythingWorkspace.id) {\n          return allChatsFolder;\n        }\n\n        const folder = chatFoldersById[id] || allChatsFolder;\n        if (folder && (currentWorkspaceId === everythingWorkspace.id || currentWorkspace.foldersIds.includes(id))) {\n          return folder;\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, currentWorkspaceId, currentWorkspace.foldersIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        key={`${currentWorkspaceId}-${activeChatFolder}`}\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\r\nimport { getActions } from '../../../global';\r\nimport { Workspace } from '../../../types';\r\nimport { useStorage } from '../../../hooks/useStorage';\r\n\r\nimport DropdownMenu from '../../ui/DropdownMenu';\r\nimport MenuItem from '../../ui/MenuItem';\r\n\r\nimport './WorkspaceManager.scss';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\nimport MenuSeparator from '../../ui/MenuSeparator';\r\n\r\nconst WorkspaceManager: FC = () => {\r\n  const { openWorkspaceCreator, openWorkspaceEditor, setActiveChatFolder } = getActions();\r\n  const { savedWorkspaces, currentWorkspaceId, setCurrentWorkspaceId } = useStorage();\r\n\r\n  const everythingWorkspace: Workspace = { id: '0', name: 'Everything', foldersIds: [] };\r\n  const selectedWorkspace = savedWorkspaces.find(workspace => workspace.id === currentWorkspaceId) || everythingWorkspace;\r\n\r\n  const handleWorkspaceSelect = useCallback((workspace: Workspace) => {\r\n    setCurrentWorkspaceId(workspace.id);\r\n    setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\r\n  }, [setCurrentWorkspaceId, setActiveChatFolder]);\r\n\r\n  const handleCreateWorkspace = useCallback(() => {\r\n    openWorkspaceCreator();\r\n  }, [openWorkspaceCreator]);\r\n\r\n  const renderTrigger = useCallback(({ onTrigger, isOpen }: { onTrigger: () => void; isOpen?: boolean }) => (\r\n    <div\r\n      key={selectedWorkspace?.id}\r\n      onClick={onTrigger}\r\n      className={buildClassName('WorkspaceManager-trigger', isOpen && 'active')}\r\n    >\r\n      <Icon name=\"my-notes\" />\r\n      {selectedWorkspace.name}\r\n    </div>\r\n  ), [selectedWorkspace]);\r\n\r\n  return (\r\n    <DropdownMenu\r\n      className=\"WorkspaceManager-dropdown\"\r\n      trigger={renderTrigger}\r\n      positionX=\"left\"\r\n    >\r\n      {[everythingWorkspace, ...savedWorkspaces].map((workspace) => (\r\n        <MenuItem\r\n          key={workspace.id}\r\n          onClick={() => handleWorkspaceSelect(workspace)}\r\n          className=\"WorkspaceManager-item\"\r\n        >\r\n          {workspace.name}\r\n          {workspace.id === currentWorkspaceId && <Icon name=\"check\" />}\r\n        </MenuItem>\r\n      ))}\r\n      <MenuSeparator />\r\n      <MenuItem\r\n        icon=\"add\"\r\n        onClick={handleCreateWorkspace}\r\n      >\r\n        New Workspace\r\n      </MenuItem>\r\n      {selectedWorkspace.id !== everythingWorkspace.id && (\r\n        <MenuItem\r\n          icon=\"settings\"\r\n          onClick={() => openWorkspaceEditor({ workspaceId: selectedWorkspace.id })}\r\n        >\r\n          Workspace settings\r\n        </MenuItem>\r\n      )}\r\n    </DropdownMenu>\r\n  );\r\n};\r\n\r\nexport default memo(WorkspaceManager);\r\n","import { getActions, withGlobal } from '../../../global';\r\nimport { selectCurrentChat, selectIsChatWithSelf } from '../../../global/selectors';\r\nimport type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\n\r\nimport './SavedMessages.scss';\r\n\r\ntype StateProps = {\r\n  currentUserId?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\nconst SavedMessages: FC<StateProps> = ({ currentUserId, isActive }) => {\r\n  const { openChat, focusLastMessage } = getActions();\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        openChat({ id: currentUserId });\r\n        focusLastMessage();\r\n      }}\r\n      className={buildClassName('SavedMessages-trigger', isActive && 'active')}\r\n    >\r\n      <Icon name=\"saved-messages\" />  \r\n      Saved\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    const currentUserId = global.currentUserId!;\r\n    const currentChat = selectCurrentChat(global);\r\n    const isChatWithSelf = currentChat ? selectIsChatWithSelf(global, currentChat.id) : false;\r\n\r\n    return {\r\n      currentUserId,\r\n      isActive: isChatWithSelf,\r\n    }\r\n  }\r\n)(SavedMessages));","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport WorkspaceManager from './WorkspaceManager';\r\nimport SavedMessages from './SavedMessages';\r\nimport './CustomButtons.scss';\r\n\r\nconst CustomButtons: FC = () => {\r\n  return (\r\n    <div className=\"CustomButtons\">\r\n      <WorkspaceManager />\r\n      <SavedMessages />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(CustomButtons);","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\nimport CustomButtons from './CustomButtons';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <CustomButtons />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n      const newIndex = pinnedIndexAboveFocused !== -1 ? pinnedIndexAboveFocused : 0;\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftModal = useModuleLoader(Bundles.Extra, 'PremiumGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftModal ? <PremiumGiftModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Extra, 'StarsGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canMarkAsRead = isChatWithSelf && !isOwn;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (!asForwarded && calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canMarkAsRead && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Mark as read\"\n                  onClick={handleMarkAsRead}\n                >\n                  <Icon name=\"check\" />\n                </Button>\n              )}\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages, deleteMessages\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleMarkAsRead = useLastCallback(() => {\n    deleteMessages({ messageIds: [messageId] });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n    openMediaViewer,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      style={style}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isRepliesChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { Signal } from '../../util/signals';\n\nimport { getMessageIsSpoiler, getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  getLoadingPinnedId: Signal<number | undefined>;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  getLoadingPinnedId, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\nimport Icon from '../common/icons/Icon';\n \nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n  isSavedMessages,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n    openSavedDialog,\n    focusLastMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(messageId);\n    }\n  });\n\n  const handleOpenSavedMessages = useLastCallback(() => {\n    openSavedDialog({ chatId });\n    focusLastMessage();\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      {!isMobile && !isSavedMessages && !isSavedDialog && (\n      <Button className=\"saved-messages-button\" round size=\"smaller\" color=\"translucent\" onClick={handleOpenSavedMessages} ariaLabel=\"Saved Messages\">\n          <Icon name=\"saved-messages\" />\n        </Button>\n      )}\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          getLoadingPinnedId={getLoadingPinnedId}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n      isSavedMessages,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PremiumGiftModal from '../main/premium/PremiumGiftModal.async';\nimport StarsGiftModal from '../main/premium/StarsGiftModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isPremiumGiftModalOpen?: boolean;\n  isStarsGiftModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isPremiumGiftModalOpen,\n  isStarsGiftModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <PremiumGiftModal isOpen={isPremiumGiftModalOpen} />\n      <StarsGiftModal isOpen={isStarsGiftModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftModal, starsGiftModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isPremiumGiftModalOpen: giftModal?.isOpen,\n      isStarsGiftModalOpen: starsGiftModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApps' |\n'starsTransactionModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Extra, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    handleLoadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_STAR, CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={hasStars ? { ...CUSTOM_PEER_STAR, titleValue: boost.stars }\n            : (!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined)}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.filter(Boolean).forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingPickerModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingPickerModal ? <PremiumGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingPickerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Extra, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { GlobalState } from '../types';\r\n\r\nexport function selectIsWorkspaceCreatorOpen<T extends GlobalState>(global: T) {\r\n  return global.workspaces.isCreatorOpen;\r\n}\r\n\r\nexport function selectEditingWorkspaceId<T extends GlobalState>(global: T) {\r\n  return global.workspaces.editingWorkspaceId;\r\n}","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingPickerModal from './premium/PremiumGiftingPickerModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\nimport WorkspaceSettingsPageRoot from './workspace/WorkspaceSettingsPageRoot.react';\nimport { selectIsWorkspaceCreatorOpen, selectEditingWorkspaceId } from '../../global/selectors/workspaces';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingPickerModal?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isWorkspaceCreatorOpen: boolean;\n  editingWorkspaceId?: string;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingPickerModal,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isWorkspaceCreatorOpen,\n  editingWorkspaceId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    closeWorkspaceCreator,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <PremiumGiftingPickerModal isOpen={isPremiumGiftingPickerModal} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      <WorkspaceSettingsPageRoot isOpen={isWorkspaceCreatorOpen} onClose={closeWorkspaceCreator} workspaceId={editingWorkspaceId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      starsGiftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingPickerModal: giftingModal?.isOpen,\n      isStarsGiftingPickerModal: starsGiftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isWorkspaceCreatorOpen: selectIsWorkspaceCreatorOpen(global),\n      editingWorkspaceId: selectEditingWorkspaceId(global),\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","onFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webApp","_len3","_key3","currentTabState","openedWebApps","webApps","key","getWebAppKey","originalWebApp","updatedValue","updatedWebAppKey","activeWebApp","activeWebAppKey","addWebAppToOpenList","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","isRemovedAppActive","openedWebAppsValues","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len11","_key11","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","isWepAppOpened","webAppKey","_len4","_key4","newActiveWebApp","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","_len6","_key6","removeActiveWebAppFromOpenList","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","k","clearOpenedWebApps","_len10","_key10","replaceWebAppModalState","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","giftingModal","starsGiftingModal","transaction","getStarsTransactionFromGift","openStarsTransactionModal","getPrizeStarsTransactionFromGiveaway","forUserIds","giftModal","forUserId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","stars","currentStatus","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","starsTransactionModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","updateWorkspaceSettings","workspaces","formatCurrencyAsString","giftModalState","isCompleted","starsModalState","isCreatorOpen","editingWorkspaceId","workspaceId","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","useStorage","savedWorkspaces","setSavedWorkspaces","useLocalStorage","initValue","currentWorkspaceId","setCurrentWorkspaceId","eventName","getStoredValue","localStorage","getItem","writeValue","stringifiedValue","setItem","dispatchEvent","Event","restoreValue","storedValue","setState","listenStorageChange","addEventListener","removeEventListener","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","allChatsFolder","useDerivedState","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","everythingWorkspace","foldersIds","currentWorkspace","workspace","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","WorkspaceManager","openWorkspaceCreator","openWorkspaceEditor","selectedWorkspace","handleWorkspaceSelect","handleCreateWorkspace","renderTrigger","Icon","MenuSeparator","CustomButtons","SavedMessages","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","PremiumGiftModal","StarsGiftModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canMarkAsRead","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleMarkAsRead","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","renderMediaContent","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","top","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","getLoadingPinnedId","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isSavedMessages","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndex","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","openSavedDialog","isBackButtonActive","isTablet","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleOpenSavedMessages","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isPremiumGiftModalOpen","isStarsGiftModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","StarsTransactionModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","hasStars","customPeer","CUSTOM_PEER_STAR","titleValue","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingPickerModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","selectIsWorkspaceCreatorOpen","selectEditingWorkspaceId","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingPickerModal","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","isWorkspaceCreatorOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","closeWorkspaceCreator","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","prefix","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","WorkspaceSettingsPageRoot","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}